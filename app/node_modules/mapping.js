var Vow = require('Vow');

module.exports = {

    /**
     * Маппинг модели из источника
     */
    map: function(modelName, source) {
        var _this = this,
            promise = Vow.isPromise(source) || Vow.promise(source),
            schema = require('../../models/' + modelName + '/' + modelName + '.map.js'),
            result = {};

        return promise.then(function(data) {
            Object.keys(schema).forEach(function(field) {
                var rule = schema[field],
                    ctxType = typeof rule === 'string',
                    val;

                if ((ctxType === 'string') || (ctxType === 'function')) {
                    rule = { type: 'simple', ctx: rule };
                } else {
                    ctxType = typeof rule.ctx;
                }

                val = ctxType === 'string' ? data[rule.ctx] : rule.ctx(data);

                if (rule.type === 'model') {
                    result[field] = _this.map(rule.model, val);
                } else if (rule.type === 'collection' && val instanceof Array) {
                    result[field] = Vow.all(val.map(function(item) {
                        return _this.map(rule.model, item);
                    }));
                } else {
                    result[field] = Vow.isPromise(val) || Vow.promise(val);
                }
            });

            return Vow.all(result);
        });
    }

};
