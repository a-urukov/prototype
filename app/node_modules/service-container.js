'use strict';

var Vow = require('vow'),
    ym = require('ym'),
    path = require('path'),
    env = require('env'),

    Profiler = require('../lib/profiler');

/**
 * Контейнер сервисов
 * @param {Object} params
 * @constructor
 */
function ServiceContainer(params) {
    this._modules = ym.create();

    this.profiler = new Profiler();

    // декларируем глобальный модуль с переданными настройками
    this._modules.define('GLOBAL', function(provide) {
        provide(params);
    });
}

/**
 * Кеш сервисов
 * @type {Object}
 * @private
 */
ServiceContainer._services = {};

/**
 * Декларирует сервис в контейнере
 * @param {String} name имя сервиса
 * @param {Array} deps массив зависимостей
 * @param {*} service сервис
 */
ServiceContainer.decl = function(name, deps, service) {
    if (arguments.length === 2) {
        service = deps;
        deps = [];
    }

    ServiceContainer._services[name] = {
        name: name,
        deps: deps,
        service: service
    };
};

/**
 * Предоставляет сервисы в коллбеке
 * @param {Array} services
 * @param {Function} callback
 * @param {*} [callbackCtx]
 * @returns {*}
 */
ServiceContainer.prototype.require = function(services, callback, callbackCtx) {
    services.forEach(this._define, this);

    this._modules.require(services, function() {
        callback.apply(callbackCtx, arguments);
    });
};

/**
 * Предоставляет сервисы в промисе
 * @param {String} services...
 * @override
 * @returns {Promise.<Service[]>}
 * @protected
 */
ServiceContainer.prototype.resolve = function(services) {
    var promise = Vow.promise(),
        slice = Array.prototype.slice;

    this.require(slice.call(arguments), function() {
        promise.fulfill(slice.call(arguments));
    });

    return promise;
};

/**
 * Инициализирует сервис
 * @param {String} name
 * @private
 */
ServiceContainer.prototype._define = function(name) {
    if (this._modules.isDefined(name)) return;

    if (!ServiceContainer._services[name])
        env.provideModule(name, path.join(__dirname, '../services', name));

    var decl = ServiceContainer._services[name],
        _this = this;

    // инициализация зависимых сервисов
    decl.deps.forEach(this._define, this);

    this._modules.define(name, decl.deps, function(provide) {
        var args = Array.prototype.slice.call(arguments, 1),
            serviceDefine = _this.profiler.wrap(name, decl.service, 2);

        Vow.when(serviceDefine.apply(null, args), function(res) {
            provide(res);
        }).done();
    });
};


module.exports = ServiceContainer;
